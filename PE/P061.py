# Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and
# are generated by the following formulae:
#
# Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
# Square	 	P4,n=n2	 	1, 4, 9, 16, 25, ...
# Pentagonal	 	P5,n=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
# Hexagonal	 	P6,n=n(2n−1)	 	1, 6, 15, 28, 45, ...
# Heptagonal	 	P7,n=n(5n−3)/2	 	1, 7, 18, 34, 55, ...
# Octagonal	 	P8,n=n(3n−2)	 	1, 8, 21, 40, 65, ...
# The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.
#
# The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including
# the last number with the first). Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (
# P5,44=2882), is represented by a different number in the set. This is the only set of 4-digit numbers with this
# property. Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type:
# triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.


def Triangle(n):
    return n * (n + 1) / 2


def Square(n):
    return n ** 2


def Pentagonal(n):
    return n * (3 * n - 1) / 2


def Hexagonal(n):
    return n * (2 * n - 1)


def Heptagonal(n):
    return n * (5 * n - 3) / 2


def Octagonal(n):
    return n * (3 * n - 2)


def findAllN(func, last):
    allN = []
    i = 0
    curVal = 0
    while curVal < 10000:
        if curVal > 999 and curVal // 100 == last:
            allN += [curVal]
        i += 1
        curVal = func(i)
    return allN


def perm(first, last, tri, sqr, pnt, hex, hep):
    if tri and sqr and pnt and hex and hep:
        # check with the first val, then return value if good
        if last == first:
            return 0
        return -1
    else:
        returnVal = -1
        # print("checking")
        if not tri:
            potentialPairs = findAllN(Triangle, last)
            if potentialPairs:
                for pair in potentialPairs:
                    val = perm(first, pair % 100, True, sqr, pnt, hex, hep)
                    if val != -1:
                        returnVal = val + pair
                        print("tri: " + str(pair))
        if not sqr:
            potentialPairs = findAllN(Square, last)
            if potentialPairs:
                for pair in potentialPairs:
                    val = perm(first, pair % 100, tri, True, pnt, hex, hep)
                    if val != -1:
                        returnVal = val + pair
                        print("sqr: " + str(pair))
        if not pnt:
            potentialPairs = findAllN(Pentagonal, last)
            if potentialPairs:
                for pair in potentialPairs:
                    val = perm(first, pair % 100, tri, sqr, True, hex, hep)
                    if val != -1:
                        returnVal = val + pair
                        print("pen: " + str(pair))
        if not hex:
            potentialPairs = findAllN(Hexagonal, last)
            if potentialPairs:
                for pair in potentialPairs:
                    val = perm(first, pair % 100, tri, sqr, pnt, True, hep)
                    if val != -1:
                        returnVal = val + pair
                        print("hex: " + str(pair))
        if not hep:
            potentialPairs = findAllN(Heptagonal, last)
            if potentialPairs:
                for pair in potentialPairs:
                    val = perm(first, pair % 100, tri, sqr, pnt, hex, True)
                    if val != -1:
                        returnVal = val + pair
                        print("hep: " + str(pair))
        return returnVal


def main():
    allN = []
    i = 0
    curVal = 0
    while curVal < 10000:
        if curVal > 999:
            allN += [curVal]
        i += 1
        curVal = Octagonal(i)
    print(allN)
    for val in allN:
        sum = perm(val // 100, val % 100, False, False, False, False, False)
        print("checking " + str(val) + " got " + str(sum))
        if sum != -1:
            print("final sum is: " + str(sum + val))

    print("Done")


if __name__ == '__main__':
    main()
